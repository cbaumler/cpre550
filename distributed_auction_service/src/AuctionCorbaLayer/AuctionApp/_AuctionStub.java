package AuctionApp;


/**
* AuctionApp/_AuctionStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from auction.idl
* Sunday, April 6, 2014 2:45:20 AM CDT
*/

public class _AuctionStub extends org.omg.CORBA.portable.ObjectImpl implements AuctionApp.Auction
{


  // Raises MAX_AUCTIONS_REACHED exception if an auction is already active
  public void offerItem (String userId, String itemDesc, int price) throws AuctionApp.AuctionFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("offerItem", true);
                $out.write_string (userId);
                $out.write_string (itemDesc);
                $out.write_ulong (price);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:AuctionApp/AuctionFailure:1.0"))
                    throw AuctionApp.AuctionFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                offerItem (userId, itemDesc, price        );
            } finally {
                _releaseReply ($in);
            }
  } // offerItem


  // Raises NO_ACTIVE_AUCTION exception if no auction is active
  public String viewHighBidder (String userId) throws AuctionApp.AuctionFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("viewHighBidder", true);
                $out.write_string (userId);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:AuctionApp/AuctionFailure:1.0"))
                    throw AuctionApp.AuctionFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return viewHighBidder (userId        );
            } finally {
                _releaseReply ($in);
            }
  } // viewHighBidder


  // Raises NO_ACTIVE_AUCTION exception if no auction is active
  public void sellItem (String userId) throws AuctionApp.AuctionFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("sellItem", true);
                $out.write_string (userId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:AuctionApp/AuctionFailure:1.0"))
                    throw AuctionApp.AuctionFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                sellItem (userId        );
            } finally {
                _releaseReply ($in);
            }
  } // sellItem


  // If called by a bidder, returns auction state, item description, and item price
  public void viewAuctionStatus (String userId, org.omg.CORBA.BooleanHolder isActive, org.omg.CORBA.StringHolder itemDesc, org.omg.CORBA.IntHolder price, org.omg.CORBA.StringHolder highBidder)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("viewAuctionStatus", true);
                $out.write_string (userId);
                $in = _invoke ($out);
                isActive.value = $in.read_boolean ();
                itemDesc.value = $in.read_string ();
                price.value = $in.read_ulong ();
                highBidder.value = $in.read_string ();
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                viewAuctionStatus (userId, isActive, itemDesc, price, highBidder        );
            } finally {
                _releaseReply ($in);
            }
  } // viewAuctionStatus


  // Raises ACTION_NOT_PERMITTED exception when called by the seller
  public void bid (String userId, int price) throws AuctionApp.AuctionFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("bid", true);
                $out.write_string (userId);
                $out.write_ulong (price);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:AuctionApp/AuctionFailure:1.0"))
                    throw AuctionApp.AuctionFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                bid (userId, price        );
            } finally {
                _releaseReply ($in);
            }
  } // bid


  // Raises ACTION_NOT_PERMITTED exception when not called by the Auction Manager
  public String viewSeller (String userId) throws AuctionApp.AuctionFailure
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("viewSeller", true);
                $out.write_string (userId);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:AuctionApp/AuctionFailure:1.0"))
                    throw AuctionApp.AuctionFailureHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return viewSeller (userId        );
            } finally {
                _releaseReply ($in);
            }
  } // viewSeller

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:AuctionApp/Auction:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _AuctionStub

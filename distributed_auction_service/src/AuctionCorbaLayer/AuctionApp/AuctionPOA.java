package AuctionApp;


/**
* AuctionApp/AuctionPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from auction.idl
* Sunday, April 6, 2014 2:45:20 AM CDT
*/

public abstract class AuctionPOA extends org.omg.PortableServer.Servant
 implements AuctionApp.AuctionOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("offerItem", new java.lang.Integer (0));
    _methods.put ("viewHighBidder", new java.lang.Integer (1));
    _methods.put ("sellItem", new java.lang.Integer (2));
    _methods.put ("viewAuctionStatus", new java.lang.Integer (3));
    _methods.put ("bid", new java.lang.Integer (4));
    _methods.put ("viewSeller", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // Raises MAX_AUCTIONS_REACHED exception if an auction is already active
       case 0:  // AuctionApp/Auction/offerItem
       {
         try {
           String userId = in.read_string ();
           String itemDesc = in.read_string ();
           int price = in.read_ulong ();
           this.offerItem (userId, itemDesc, price);
           out = $rh.createReply();
         } catch (AuctionApp.AuctionFailure $ex) {
           out = $rh.createExceptionReply ();
           AuctionApp.AuctionFailureHelper.write (out, $ex);
         }
         break;
       }


  // Raises NO_ACTIVE_AUCTION exception if no auction is active
       case 1:  // AuctionApp/Auction/viewHighBidder
       {
         try {
           String userId = in.read_string ();
           String $result = null;
           $result = this.viewHighBidder (userId);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (AuctionApp.AuctionFailure $ex) {
           out = $rh.createExceptionReply ();
           AuctionApp.AuctionFailureHelper.write (out, $ex);
         }
         break;
       }


  // Raises NO_ACTIVE_AUCTION exception if no auction is active
       case 2:  // AuctionApp/Auction/sellItem
       {
         try {
           String userId = in.read_string ();
           this.sellItem (userId);
           out = $rh.createReply();
         } catch (AuctionApp.AuctionFailure $ex) {
           out = $rh.createExceptionReply ();
           AuctionApp.AuctionFailureHelper.write (out, $ex);
         }
         break;
       }


  // If called by a bidder, returns auction state, item description, and item price
       case 3:  // AuctionApp/Auction/viewAuctionStatus
       {
         String userId = in.read_string ();
         org.omg.CORBA.BooleanHolder isActive = new org.omg.CORBA.BooleanHolder ();
         org.omg.CORBA.StringHolder itemDesc = new org.omg.CORBA.StringHolder ();
         org.omg.CORBA.IntHolder price = new org.omg.CORBA.IntHolder ();
         org.omg.CORBA.StringHolder highBidder = new org.omg.CORBA.StringHolder ();
         this.viewAuctionStatus (userId, isActive, itemDesc, price, highBidder);
         out = $rh.createReply();
         out.write_boolean (isActive.value);
         out.write_string (itemDesc.value);
         out.write_ulong (price.value);
         out.write_string (highBidder.value);
         break;
       }


  // Raises ACTION_NOT_PERMITTED exception when called by the seller
       case 4:  // AuctionApp/Auction/bid
       {
         try {
           String userId = in.read_string ();
           int price = in.read_ulong ();
           this.bid (userId, price);
           out = $rh.createReply();
         } catch (AuctionApp.AuctionFailure $ex) {
           out = $rh.createExceptionReply ();
           AuctionApp.AuctionFailureHelper.write (out, $ex);
         }
         break;
       }


  // Raises ACTION_NOT_PERMITTED exception when not called by the Auction Manager
       case 5:  // AuctionApp/Auction/viewSeller
       {
         try {
           String userId = in.read_string ();
           String $result = null;
           $result = this.viewSeller (userId);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (AuctionApp.AuctionFailure $ex) {
           out = $rh.createExceptionReply ();
           AuctionApp.AuctionFailureHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:AuctionApp/Auction:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Auction _this() 
  {
    return AuctionHelper.narrow(
    super._this_object());
  }

  public Auction _this(org.omg.CORBA.ORB orb) 
  {
    return AuctionHelper.narrow(
    super._this_object(orb));
  }


} // class AuctionPOA
